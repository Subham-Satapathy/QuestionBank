[
  {
    "id": "1",
    "question": "How do you define a variable with a specific type in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "variables",
      "types"
    ],
    "example": "let age: number = 25;",
    "options": [
      "Option A: Use the 'var' keyword followed by the type",
      "Option B: Use the 'let' or 'const' keyword followed by the variable name and type",
      "Option C: Declare the variable without any type and let TypeScript infer it",
      "Option D: Use the 'declare' keyword to specify the type"
    ],
    "answer": "Option B: Use the 'let' or 'const' keyword followed by the variable name and type",
    "timestamp": "2025-05-25T16:17:13.080Z",
    "hash": "b3bc4464e8f5af25d60670550dbd38aa98c2068784fe1e7b8100ab3c3fda3b2f",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "3",
    "question": "What is the correct way to define a generic function in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "generics",
      "functions"
    ],
    "example": "function identity<T>(arg: T): T { return arg; }",
    "options": [
      "Option A: Using angle brackets after the function name",
      "Option B: Using angle brackets before the function name",
      "Option C: Using the 'generic' keyword",
      "Option D: Using parentheses around the type parameter"
    ],
    "answer": "Option B: Using angle brackets before the function name",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "a9d98d384cbc3b700c195410eba1f46b7171cdd0cca88bc6268836550fe3bc43",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "4",
    "question": "How do you properly type an array of strings in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "arrays",
      "types"
    ],
    "example": "let fruits: string[] = ['apple', 'banana'];",
    "options": [
      "Option A: Use the 'Array<string>' syntax",
      "Option B: Use the 'string[]' syntax",
      "Option C: Use the '[]string' syntax",
      "Option D: Both Option A and Option B"
    ],
    "answer": "Option D: Both Option A and Option B",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "3922fd7ac9ab7c37554a57f226e1dce7aa0138a0f122225a262d74771d4e3b76",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "5",
    "question": "What is the correct way to handle a union type for a function parameter that can be either a string or a number?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "union-types",
      "functions"
    ],
    "example": "function printId(id: string | number) { console.log(id); }",
    "options": [
      "Option A: Use the 'any' type to accept both types",
      "Option B: Use a type assertion to convert the parameter to a string",
      "Option C: Use a union type with the '|' operator",
      "Option D: Overload the function with separate definitions for each type"
    ],
    "answer": "Option C: Use a union type with the '|' operator",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "b5c23136f150730f4dcb456cf595514fea5688404964482b217de9d7dae77c58",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "6",
    "question": "How do you enforce an object to have at least one property from a set of properties in TypeScript?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "utility-types",
      "objects"
    ],
    "example": "type AtLeastOne<T, K extends keyof T> = Partial<T> & { [P in K]: Required<Pick<T, P>> }[K];",
    "options": [
      "Option A: Use a mapped type to make all properties optional",
      "Option B: Use the 'Partial' utility type combined with an intersection type",
      "Option C: Use a conditional type to check for property existence",
      "Option D: Use a generic constraint with a mapped type"
    ],
    "answer": "Option B: Use the 'Partial' utility type combined with an intersection type",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "ab91552e165f2f10e8f8b154af8292c0139e82dfa88ad327b2a04f6cac224a53",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "9",
    "question": "How can you create a readonly array in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "arrays",
      "readonly"
    ],
    "example": "const numbers: readonly number[] = [1, 2, 3];",
    "options": [
      "Option A: Use the 'ReadonlyArray' type",
      "Option B: Use the 'readonly' modifier before the array type",
      "Option C: Use the 'const' keyword with the array",
      "Option D: Both Option A and Option B"
    ],
    "answer": "Option D: Both Option A and Option B",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "5255838ca1bc918f610692a83f899eb62359d185317c1b6ec71e726001daa1b1",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "10",
    "question": "What is the correct way to type a function that returns a Promise resolving to a string?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "async",
      "promises"
    ],
    "example": "async function fetchData(): Promise<string> { return 'data'; }",
    "options": [
      "Option A: Use the 'Promise<string>' return type",
      "Option B: Use the 'async string' return type",
      "Option C: Use the 'string | Promise' union type",
      "Option D: Let TypeScript infer the return type"
    ],
    "answer": "Option A: Use the 'Promise<string>' return type",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "5408cb9244b721bcbded890cb3585e1a3909b364499a9a6bcf678dec358757c3",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "11",
    "question": "How do you create a type that is a combination of two other types in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "type-aliases",
      "union-types"
    ],
    "example": "type Result = Success | Error;",
    "options": [
      "Option A: Use the '&' operator to combine types",
      "Option B: Use the '|' operator to create a union type",
      "Option C: Use the 'extends' keyword to inherit from both types",
      "Option D: Use the 'combine' utility type"
    ],
    "answer": "Option B: Use the '|' operator to create a union type",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "15443d84d51392e38bcb8bbf678632037981ca62ef6cd29fd87dfbdaf5eb79c5",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "12",
    "question": "How can you ensure that all properties of an object are readonly in TypeScript?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "utility-types",
      "readonly"
    ],
    "example": "type ReadonlyPerson = Readonly<Person>;",
    "options": [
      "Option A: Use the 'Readonly' utility type",
      "Option B: Manually mark each property as readonly",
      "Option C: Use the 'const' keyword when declaring the object",
      "Option D: Use a mapped type with the 'readonly' modifier"
    ],
    "answer": "Option A: Use the 'Readonly' utility type",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "c1534d12ca65e317f9d13b65d6dff8660044eb5d4156de94b41cdca966b9383e",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "13",
    "question": "What is the correct way to handle async/await in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "async",
      "await"
    ],
    "example": "async function fetchData() { const data = await fetch('url'); return data.json(); }",
    "options": [
      "Option A: Mark the function as 'async' and use 'await' for promises",
      "Option B: Use '.then()' chains instead of async/await",
      "Option C: Use the 'Promise.all' method",
      "Option D: Use a try-catch block without async/await"
    ],
    "answer": "Option A: Mark the function as 'async' and use 'await' for promises",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "93676621286e3a7d97400ce164e3d40dc80b49e1d5387b8cad1a074ab9473d08",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "14",
    "question": "How do you define an enum in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "enums"
    ],
    "example": "enum Direction { Up, Down, Left, Right }",
    "options": [
      "Option A: Use the 'enum' keyword followed by the name and values",
      "Option B: Use the 'const enum' keyword for better performance",
      "Option C: Use an object with constant values",
      "Option D: Both Option A and Option B"
    ],
    "answer": "Option D: Both Option A and Option B",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "467ef89739b99d0e463c24e30daec18589e9b3e0d6d477764737eb86a1b1904f",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "15",
    "question": "What is the correct way to type a function with a default parameter in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "functions",
      "default-parameters"
    ],
    "example": "function greet(name: string = 'Guest') { console.log(`Hello, ${name}`); }",
    "options": [
      "Option A: Assign a default value in the parameter declaration",
      "Option B: Use the 'default' keyword before the parameter",
      "Option C: Overload the function with different parameter lists",
      "Option D: Use a union type with 'undefined'"
    ],
    "answer": "Option A: Assign a default value in the parameter declaration",
    "timestamp": "2025-05-25T16:17:13.081Z",
    "hash": "66b70820c1e37aad5976ad3434795cb7b7e3ed4fc96c4791316eb560a18bae11",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "question": "Create a type-safe function that accepts a string or number.",
    "difficulty": "easy",
    "tags": [
      "types",
      "union-types"
    ],
    "example": "function process(value: string | number)",
    "options": [
      "Use union types (string | number)",
      "Use generic constraints",
      "Use function overloads",
      "Use conditional types"
    ],
    "answer": "Use union types (string | number)",
    "id": "typescript_mixed_mock_1748189833082_0",
    "topic": "typescript",
    "timestamp": "2025-05-25T16:17:13.082Z",
    "hash": "b1f0b8a82d325fd93805bd32b4f30219aced078995152252c940a92383f2ed06",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "question": "Create a generic function that safely gets a nested property from an object.",
    "difficulty": "medium",
    "tags": [
      "generics",
      "type-safety"
    ],
    "example": "getNestedProperty(obj, 'user.profile.name')",
    "options": [
      "Use keyof and template literal types",
      "Use recursive type definitions",
      "Use mapped types with conditional logic",
      "Use utility types like Pick and Partial"
    ],
    "answer": "Use keyof and template literal types",
    "id": "typescript_mixed_mock_1748189833082_1",
    "topic": "typescript",
    "timestamp": "2025-05-25T16:17:13.082Z",
    "hash": "1ab79466ce1975bff3c42a0cda745b0c804cc7057690c2bc225c2f7694f56582",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "question": "Implement a type-safe event emitter using TypeScript generics.",
    "difficulty": "hard",
    "tags": [
      "generics",
      "events",
      "type-safety"
    ],
    "example": "EventEmitter<{ click: MouseEvent; change: string }>",
    "options": [
      "Use mapped types with function signatures",
      "Use conditional types with infer keyword",
      "Use template literal types for event names",
      "Use recursive type definitions"
    ],
    "answer": "Use mapped types with function signatures",
    "id": "typescript_mixed_mock_1748189833082_2",
    "topic": "typescript",
    "timestamp": "2025-05-25T16:17:13.082Z",
    "hash": "c5bdd20c4a9979a19f01afba727359173112f0facca40a770904e08facc7ebec",
    "savedAt": "2025-05-25T16:17:13.083Z"
  },
  {
    "id": "1",
    "question": "How can you create a type that represents a tuple where the first element is a string and the second element is a number?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "tuples",
      "types"
    ],
    "example": "const myTuple: [string, number] = ['hello', 42];",
    "options": [],
    "answer": "Option C: Use an array with a fixed length and specify types for each position.",
    "timestamp": "2025-05-25T16:19:27.022Z",
    "hash": "afed454ed2f837376c71afc82da5ab3eb67bf9ef818e7c70fc3444cdb668e4c8",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "3",
    "question": "How can you create a type that represents a function that takes a number and returns a string?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "function-types"
    ],
    "example": "type NumToString = (num: number) => string;",
    "options": [],
    "answer": "Option C: Use a type alias with a function signature.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "fa48278e6e6b71d714d3aeb6f78aa3046f8d6739d0c8e0eb582e56e0a825cd82",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "4",
    "question": "How can you create a type that represents a union of string literals 'red', 'green', and 'blue'?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "union-types",
      "literal-types"
    ],
    "example": "type Color = 'red' | 'green' | 'blue';",
    "options": [],
    "answer": "Option C: Use a union type with the literal values.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "5903a09109e0c89fc3db3e51cd04f98e8a6d47c96f762c84c8876a0a65e7454d",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "5",
    "question": "How can you create a type that represents an object with optional properties?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "optional-properties"
    ],
    "example": "interface User { name?: string; age?: number; }",
    "options": [],
    "answer": "Option A: Use the `Partial` utility type.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "b04e676ade213863a957801e76709124073055c93531791c2275cdeffab9a6e9",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "6",
    "question": "How can you create a type that represents a readonly array of numbers?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "readonly",
      "arrays"
    ],
    "example": "const numbers: ReadonlyArray<number> = [1, 2, 3];",
    "options": [],
    "answer": "Option B: Use the `ReadonlyArray` utility type.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "f738b52a3feac0d5c4c2ee33365da9e06b2f529cd09db3bb9564c9a2874ab683",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "7",
    "question": "How can you create a type that represents a mapped type where all properties are nullable?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "mapped-types"
    ],
    "example": "type Nullable<T> = { [P in keyof T]: T[P] | null };",
    "options": [],
    "answer": "Option C: Use a mapped type with a union of the property type and `null`.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "89f7f602e105ff5b6745112eeca284973cf735557fa6181699b172da2fecc64a",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "8",
    "question": "How can you create a type that represents a function with a variable number of arguments?",
    "difficulty": "hard",
    "topic": "typescript",
    "tags": [
      "rest-parameters"
    ],
    "example": "type Sum = (...args: number[]) => number;",
    "options": [],
    "answer": "Option B: Use a type with a rest parameter.",
    "timestamp": "2025-05-25T16:19:27.023Z",
    "hash": "0baf882023c72bfd759ede04ec9acf85dd7e05d780cdd7342c5bc80e3fa49dcf",
    "savedAt": "2025-05-25T16:19:27.027Z"
  },
  {
    "id": "ts-medium-4",
    "question": "Which TypeScript feature allows you to create a new type by combining existing types?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "union-types",
      "type-aliases"
    ],
    "example": "type ID = string | number;",
    "options": [
      "Option A: Generics",
      "Option B: Union Types",
      "Option C: Type Assertions",
      "Option D: Decorators"
    ],
    "answer": "Option B: Union Types",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "594ab6abadf49a217d1906a0c03e143df8b17d5e7c336ad6e58a3f61922a0020",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-5",
    "question": "How can you ensure a class property is initialized in the constructor in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "classes",
      "strict-mode"
    ],
    "example": "class User { constructor(public name: string) {} }",
    "options": [
      "Option A: Use the '!' operator to declare the property.",
      "Option B: Assign a default value to the property.",
      "Option C: Disable strict property initialization.",
      "Option D: Use the 'readonly' modifier."
    ],
    "answer": "Option B: Assign a default value to the property.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "734c2d566a7fc65f9b511fae0fa035f89a3ea39f1d0c18bf141b7df7efa51caf",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-6",
    "question": "Which method correctly narrows the type of a variable in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "type-guards",
      "narrowing"
    ],
    "example": "if (typeof value === 'string') { /* ... */ }",
    "options": [
      "Option A: Using 'instanceof' checks.",
      "Option B: Using type assertions with 'as'.",
      "Option C: Using 'typeof' or user-defined type guards.",
      "Option D: Using the 'any' type to bypass type checking."
    ],
    "answer": "Option C: Using 'typeof' or user-defined type guards.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "85b677aecf119800b167076eb00f2719451fa42cd607827afd9b3c1fccb46f50",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-7",
    "question": "What is the best way to define an array of mixed types in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "arrays",
      "union-types"
    ],
    "example": "let mixedArray: (string | number)[] = ['hello', 42];",
    "options": [
      "Option A: Use the 'any[]' type.",
      "Option B: Use a union type inside the array type.",
      "Option C: Define separate arrays for each type.",
      "Option D: Use a tuple type with optional elements."
    ],
    "answer": "Option B: Use a union type inside the array type.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "bf10ae5c240079151dffa411e8e7972cc9f1f8bb97a59b1274c45cd55a7257c4",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-8",
    "question": "How do you create a read-only array in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "arrays",
      "immutability"
    ],
    "example": "const numbers: ReadonlyArray<number> = [1, 2, 3];",
    "options": [
      "Option A: Use the 'const' keyword when declaring the array.",
      "Option B: Use the 'ReadonlyArray' type.",
      "Option C: Use the 'freeze' method from the Object API.",
      "Option D: Mark each element as 'readonly'."
    ],
    "answer": "Option B: Use the 'ReadonlyArray' type.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "c142da26ae07fc9ec0fea787e4ff79d0e30dcde31643ae84261b9e6f8a292d43",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-10",
    "question": "How do you type a function that accepts a callback in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "callbacks",
      "function-types"
    ],
    "example": "function withCallback(callback: (result: string) => void) { /* ... */ }",
    "options": [
      "Option A: Use 'Function' as the type for the callback.",
      "Option B: Define the callback signature using arrow function syntax.",
      "Option C: Use 'any' for the callback parameter.",
      "Option D: Wrap the callback in an interface."
    ],
    "answer": "Option B: Define the callback signature using arrow function syntax.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "ebfb7bcae54d3af9a25cc146379f7b86ce7dbbc3f98549eada73f2f72d974ecd",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-11",
    "question": "What is the correct way to use generics in a TypeScript class?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "generics",
      "classes"
    ],
    "example": "class Box<T> { constructor(public value: T) {} }",
    "options": [
      "Option A: Declare the generic type after the class name.",
      "Option B: Use angle brackets in the constructor.",
      "Option C: Define a generic type outside the class.",
      "Option D: Use the 'any' type instead of generics."
    ],
    "answer": "Option A: Declare the generic type after the class name.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "54dd7fd60b820a6cfcc2fa508f6c4d6e441fd489878ecba1a3af36bd07e73bd4",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-12",
    "question": "Which TypeScript feature allows you to infer the type of a function's parameters?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "type-inference",
      "parameters"
    ],
    "example": "function greet(name: string) { return `Hello, ${name}`; }",
    "options": [
      "Option A: Type annotations on parameters.",
      "Option B: The 'typeof' operator.",
      "Option C: The 'infer' keyword.",
      "Option D: The 'Parameters' utility type."
    ],
    "answer": "Option D: The 'Parameters' utility type.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "dc46974d1faef0471c0cbbdeb4489bc0483f5bfb0c5171688556f63197198af8",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-13",
    "question": "How do you handle method overloading in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "method-overloading",
      "functions"
    ],
    "example": "function greet(name: string): string;\nfunction greet(age: number): string;",
    "options": [
      "Option A: Use different method names for each signature.",
      "Option B: Define multiple function signatures followed by a single implementation.",
      "Option C: Use optional parameters with union types.",
      "Option D: Overload methods by changing parameter names."
    ],
    "answer": "Option B: Define multiple function signatures followed by a single implementation.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "cc542593edd401419762a5e147b6d9714dede1b7137a04da5b8d61fbbde6c0c4",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-14",
    "question": "What is the purpose of the 'never' type in TypeScript?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "never-type",
      "type-system"
    ],
    "example": "function throwError(message: string): never { throw new Error(message); }",
    "options": [
      "Option A: To represent a value that might be null.",
      "Option B: To indicate a value that should never occur.",
      "Option C: To mark a variable as unused.",
      "Option D: To represent an asynchronous operation."
    ],
    "answer": "Option B: To indicate a value that should never occur.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "159562958cf794852fcfa0b68da4f326b619e7a47d40bfc1d7bf1f9b340c6252",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "ts-medium-15",
    "question": "How can you create a type that excludes certain properties from another type?",
    "difficulty": "medium",
    "topic": "typescript",
    "tags": [
      "utility-types",
      "omit"
    ],
    "example": "type UserWithoutId = Omit<User, 'id'>;",
    "options": [
      "Option A: Use the 'Exclude' utility type.",
      "Option B: Use the 'Pick' utility type.",
      "Option C: Use the 'Omit' utility type.",
      "Option D: Manually redefine the type without the properties."
    ],
    "answer": "Option C: Use the 'Omit' utility type.",
    "timestamp": "2025-05-25T16:20:52.248Z",
    "hash": "cac89d06acdce67a210f9c854050f770188a486f8a97a0973a127d095e3a6a9d",
    "savedAt": "2025-05-25T16:20:52.253Z"
  },
  {
    "id": "3",
    "question": "Which TypeScript type is used to represent an array of strings?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "arrays",
      "types"
    ],
    "example": "",
    "options": [
      "Option A: string[]",
      "Option B: Array<string>",
      "Option C: StringArray",
      "Option D: Both A and B"
    ],
    "answer": "Option D: Both A and B",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "0bfa584c96eecfe4f8628ffb3d9447a35849b93d9bddf9d5cbfc31b6e6c92771",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "5",
    "question": "What is the correct way to import a module in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "modules"
    ],
    "example": "",
    "options": [
      "Option A: import * as utils from './utils';",
      "Option B: require('./utils');",
      "Option C: include './utils';",
      "Option D: import './utils';"
    ],
    "answer": "Option A: import * as utils from './utils';",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "586d288582f50f92ea224c58a256c558ed227b685cd5ca6f78acd9c8d0572dd3",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "6",
    "question": "How do you define a tuple type in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "tuples",
      "types"
    ],
    "example": "",
    "options": [
      "Option A: type Pair = [number, string];",
      "Option B: type Pair = (number, string);",
      "Option C: type Pair = { number, string };",
      "Option D: type Pair = Array<number | string>;"
    ],
    "answer": "Option A: type Pair = [number, string];",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "0b954ba7d8c9c15f13bfa4a43ceadc04e2ad7460e8c61c3c5d535398264bb208",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "7",
    "question": "Which keyword is used to define an enum in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "enums"
    ],
    "example": "",
    "options": [
      "Option A: enum",
      "Option B: type",
      "Option C: const",
      "Option D: interface"
    ],
    "answer": "Option A: enum",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "5b26e6ea12c25d642c866f900181331e5dfa634477bc683382e8c39c093fb2f6",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "10",
    "question": "How do you check the type of a variable in TypeScript at runtime?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "types",
      "runtime"
    ],
    "example": "",
    "options": [
      "Option A: typeof variable === 'string'",
      "Option B: variable instanceof String",
      "Option C: typeOf variable === 'string'",
      "Option D: Both A and B"
    ],
    "answer": "Option D: Both A and B",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "3d2732f5a89ae55136022e9e225081ff0470fb55b5eb3f910ac9a7a163869e05",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "11",
    "question": "Which TypeScript feature allows you to combine multiple types?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "unions",
      "types"
    ],
    "example": "",
    "options": [
      "Option A: Union Types",
      "Option B: Intersection Types",
      "Option C: Generic Types",
      "Option D: Type Aliases"
    ],
    "answer": "Option A: Union Types",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "ca7cad551edd3aac4bb45b4b50a50bdce6e5c274348b7b7642bfc3d964021632",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "14",
    "question": "Which keyword is used to extend an interface in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "interfaces",
      "inheritance"
    ],
    "example": "",
    "options": [
      "Option A: extends",
      "Option B: implements",
      "Option C: inherit",
      "Option D: interface"
    ],
    "answer": "Option A: extends",
    "timestamp": "2025-05-25T16:21:56.137Z",
    "hash": "853803fa437b93b3f28270e16b8d6d76863c41cbf713f355e85e1f63e97227a8",
    "savedAt": "2025-05-25T16:21:56.140Z"
  },
  {
    "id": "2",
    "question": "Which keyword is used to define an interface in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "interfaces"
    ],
    "example": "",
    "options": [
      "Option A: class",
      "Option B: interface",
      "Option C: type",
      "Option D: struct"
    ],
    "answer": "Option B: interface",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "15f9c5da1eaa0095d13db235d6ac0b8e5ee24cc7fc5d8750188dc5234962e8ee",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "3",
    "question": "How do you specify that a function parameter is optional in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "functions",
      "parameters"
    ],
    "example": "",
    "options": [
      "Option A: param: string?",
      "Option B: param?: string",
      "Option C: param: optional string",
      "Option D: param: string optional"
    ],
    "answer": "Option B: param?: string",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "7e1cea5c3a4699e64b035350e5267cc5babfd82fe4acf17508deb5f873a35da2",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "4",
    "question": "Which of the following is the correct way to define a tuple in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "tuples"
    ],
    "example": "",
    "options": [
      "Option A: let myTuple: [string, number] = ['hello', 42]",
      "Option B: let myTuple: (string, number) = ['hello', 42]",
      "Option C: let myTuple: tuple[string, number] = ['hello', 42]",
      "Option D: let myTuple: Array<string, number> = ['hello', 42]"
    ],
    "answer": "Option A: let myTuple: [string, number] = ['hello', 42]",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "1f2cff9471478dcf35a28f6289346742d874c892f2daa0f1f9b8b2b49ae07a60",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "5",
    "question": "How do you define a read-only property in a TypeScript class?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "classes",
      "properties"
    ],
    "example": "",
    "options": [
      "Option A: readonly propertyName: string",
      "Option B: const propertyName: string",
      "Option C: propertyName: readonly string",
      "Option D: propertyName: string readonly"
    ],
    "answer": "Option A: readonly propertyName: string",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "0ea7bab774eec4830c69e50f82f528d4efac7748b68cdec5140d880dd53b9d3c",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "6",
    "question": "What is the correct way to import all exports from a module in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "modules"
    ],
    "example": "",
    "options": [
      "Option A: import * as moduleName from './module'",
      "Option B: import all from './module'",
      "Option C: import './module' as moduleName",
      "Option D: import {*} from './module'"
    ],
    "answer": "Option A: import * as moduleName from './module'",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "d8e7e2c354fa97428217cc8e8accaa2ced9441aa3b13a6c20df2fcac6a2ded99",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "7",
    "question": "Which TypeScript type is used to represent a function?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "functions",
      "types"
    ],
    "example": "",
    "options": [
      "Option A: func",
      "Option B: Function",
      "Option C: function",
      "Option D: () => void"
    ],
    "answer": "Option D: () => void",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "c2a3f56e8f6281e863aaa64c528078ff0d7ab0daf27d980c05dcb627e67102a3",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "9",
    "question": "How do you define an array of strings in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "arrays",
      "types"
    ],
    "example": "",
    "options": [
      "Option A: let arr: string[] = ['a', 'b']",
      "Option B: let arr: Array<string> = ['a', 'b']",
      "Option C: let arr: strings = ['a', 'b']",
      "Option D: Both A and B are correct"
    ],
    "answer": "Option D: Both A and B are correct",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "66578c819ad5a572eaed3b17433fe793ba90eb27109c8f9fa766019cdd08db6d",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "11",
    "question": "How do you create a new instance of a class in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "classes"
    ],
    "example": "",
    "options": [
      "Option A: let obj = new MyClass()",
      "Option B: let obj = MyClass.create()",
      "Option C: let obj = Object.create(MyClass)",
      "Option D: let obj = constructor MyClass()"
    ],
    "answer": "Option A: let obj = new MyClass()",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "c12238a0957dafb0507d91766cf678babd555b1993267731334c027957e83b1b",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "12",
    "question": "Which operator is used for type assertion in TypeScript?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "types"
    ],
    "example": "",
    "options": [
      "Option A: <>",
      "Option B: as",
      "Option C: :",
      "Option D: Both A and B are correct"
    ],
    "answer": "Option D: Both A and B are correct",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "7faca61c433ddc242b1775e4ebac70ae07e03f4bf6507942b7ee9f9f4e5b069f",
    "savedAt": "2025-05-25T16:22:51.559Z"
  },
  {
    "id": "13",
    "question": "How do you make all properties of an interface optional?",
    "difficulty": "easy",
    "topic": "typescript",
    "tags": [
      "interfaces"
    ],
    "example": "",
    "options": [
      "Option A: Use the 'optional' keyword",
      "Option B: Use the 'Partial' utility type",
      "Option C: Prefix each property with '?'",
      "Option D: Use the '?' operator on the interface"
    ],
    "answer": "Option B: Use the 'Partial' utility type",
    "timestamp": "2025-05-25T16:22:51.557Z",
    "hash": "0a34d080868e346320d14650b2c170a27a2a40a4a1d7d54954ee85efa12ba76d",
    "savedAt": "2025-05-25T16:22:51.559Z"
  }
]