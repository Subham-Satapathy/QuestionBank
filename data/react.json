[
  {
    "id": "1",
    "question": "What is the correct way to create a functional component in React?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "components",
      "functional"
    ],
    "example": "function MyComponent() { return <div>Hello World</div>; }",
    "options": [
      "Option A: Using a class with a render method",
      "Option B: Using an arrow function",
      "Option C: Using a function declaration or arrow function",
      "Option D: Using a for loop"
    ],
    "answer": "Option C: Using a function declaration or arrow function",
    "timestamp": "2025-05-25T17:00:57.611Z",
    "hash": "3cdc5f9f1bddfee8720d0eb284993ee01289586bef766e0521e830544a658164",
    "savedAt": "2025-05-25T17:00:57.616Z"
  },
  {
    "id": "2",
    "question": "How do you pass data from a parent component to a child component in React?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "props",
      "components"
    ],
    "example": "<ChildComponent name='John' age={25} />",
    "options": [
      "Option A: Using state in the child component",
      "Option B: Using the `props` system",
      "Option C: Using global variables",
      "Option D: Using the `ref` attribute"
    ],
    "answer": "Option B: Using the `props` system",
    "timestamp": "2025-05-25T17:00:57.612Z",
    "hash": "2c38049f66d83c668b34bb8c31fd2a9d50c8ff47b1d59725b3d746063b7d6801",
    "savedAt": "2025-05-25T17:00:57.616Z"
  },
  {
    "id": "3",
    "question": "Which hook is used to manage state in a functional component?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "hooks",
      "state"
    ],
    "example": "const [count, setCount] = useState(0);",
    "options": [
      "Option A: useEffect",
      "Option B: useContext",
      "Option C: useState",
      "Option D: useReducer"
    ],
    "answer": "Option C: useState",
    "timestamp": "2025-05-25T17:00:57.612Z",
    "hash": "0c8ac090e4ea6a1138f409f7579faf18f1f911f10cddb48b9404cc0af107aa9a",
    "savedAt": "2025-05-25T17:00:57.616Z"
  },
  {
    "id": "4",
    "question": "What is the purpose of the `key` prop in React lists?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "lists",
      "performance"
    ],
    "example": "<li key={item.id}>{item.name}</li>",
    "options": [
      "Option A: To style the list items",
      "Option B: To uniquely identify list items and optimize rendering",
      "Option C: To bind event handlers to list items",
      "Option D: To sort the list items"
    ],
    "answer": "Option B: To uniquely identify list items and optimize rendering",
    "timestamp": "2025-05-25T17:00:57.612Z",
    "hash": "3bc3113d1e726602e5bfe47afff928c4d0aa92f95623f6897b37c19e4fd1d3c6",
    "savedAt": "2025-05-25T17:00:57.616Z"
  },
  {
    "id": "5",
    "question": "How do you conditionally render content in React?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "conditional-rendering"
    ],
    "example": "{isLoggedIn ? <p>Welcome</p> : <p>Please log in</p>}",
    "options": [
      "Option A: Using if-else statements outside JSX",
      "Option B: Using ternary operators or logical && operator inside JSX",
      "Option C: Using switch-case statements",
      "Option D: Using for loops"
    ],
    "answer": "Option B: Using ternary operators or logical && operator inside JSX",
    "timestamp": "2025-05-25T17:00:57.612Z",
    "hash": "1d980783d128b6b238ee8b2412ce83f9ba39c42249cd941d77c1a5cec1723a86",
    "savedAt": "2025-05-25T17:00:57.616Z"
  },
  {
    "id": "react-2",
    "question": "What is the purpose of the useState hook in React?",
    "difficulty": "easy",
    "topic": "react",
    "tags": [
      "hooks",
      "state"
    ],
    "example": "const [count, setCount] = useState(0);",
    "options": [
      "Option A: To fetch data from an API",
      "Option B: To manage local component state",
      "Option C: To create class components",
      "Option D: To handle forms and inputs"
    ],
    "answer": "Option B: To manage local component state",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "8dcca0e9669a33d7756d32caf15fd924c6f7eac28f10aab42c8da37a9bc6f8d7",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-4",
    "question": "What is the virtual DOM in React?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "virtual-dom",
      "performance"
    ],
    "example": "",
    "options": [
      "Option A: A direct copy of the HTML DOM",
      "Option B: A lightweight in-memory representation of the DOM",
      "Option C: A browser extension for debugging React",
      "Option D: A tool to interact with the server"
    ],
    "answer": "Option B: A lightweight in-memory representation of the DOM",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "5638385d1b4b55177a31e02643d25cd5d5a2e38f4dfb71aab553ae3442a78982",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-5",
    "question": "How can you prevent a component from re-rendering unnecessarily in React?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "performance",
      "memoization"
    ],
    "example": "",
    "options": [
      "Option A: Using React.memo()",
      "Option B: Calling forceUpdate()",
      "Option C: Increasing the state",
      "Option D: Using the render() method"
    ],
    "answer": "Option A: Using React.memo()",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "2f7752d9ac3b44bd31ac0e17d5ff24cb5dd0bef71b528bd4ec3f2ede1caf518c",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-6",
    "question": "What is the correct way to handle side effects in a functional component?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "hooks",
      "useEffect"
    ],
    "example": "useEffect(() => { fetchData(); }, []);",
    "options": [
      "Option A: By using the componentDidMount method",
      "Option B: Using the useState hook",
      "Option C: With the useEffect hook",
      "Option D: By calling an async function directly"
    ],
    "answer": "Option C: With the useEffect hook",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "477d508e1fb22c391037ddd99cbb0e61c2da312c8e8cd2809bd3ce455fa2590f",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-7",
    "question": "What is the purpose of the key prop in React lists?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "lists",
      "keys"
    ],
    "example": "<li key='item1'>Item 1</li>",
    "options": [
      "Option A: To style list items",
      "Option B: To uniquely identify list items and optimize rendering",
      "Option C: To define the order of items",
      "Option D: To store data in the DOM"
    ],
    "answer": "Option B: To uniquely identify list items and optimize rendering",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "36a9742eb92be8a7cfcdca2866566860e09d4c5449f9b9898de18263b1b83e4b",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-8",
    "question": "Which React hook is used to manage context API?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "context",
      "hooks"
    ],
    "example": "const value = useContext(MyContext);",
    "options": [
      "Option A: useState",
      "Option B: useReducer",
      "Option C: useContext",
      "Option D: useEffect"
    ],
    "answer": "Option C: useContext",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "13e7601e799f847cd97079de74307506d5e5fe697c0f684c4a7dc81cb2303eb2",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-9",
    "question": "What is the difference between controlled and uncontrolled components in React?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "forms",
      "components"
    ],
    "example": "",
    "options": [
      "Option A: Uncontrolled components use refs, while controlled components use state",
      "Option B: Controlled components use refs, while uncontrolled components use state",
      "Option C: Both use state but differ in syntax",
      "Option D: They are identical in behavior"
    ],
    "answer": "Option A: Uncontrolled components use refs, while controlled components use state",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "c9fc04f09e8d8ccbf62fdacfef15d17fe5777abefbc16625b0193c1af634bd9c",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-10",
    "question": "How can you optimize performance in a React application with large lists?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "performance",
      "virtualization"
    ],
    "example": "",
    "options": [
      "Option A: By rendering all items at once",
      "Option B: Using windowing or virtualization libraries",
      "Option C: By disabling React's reconciliation",
      "Option D: By using inline styles"
    ],
    "answer": "Option B: Using windowing or virtualization libraries",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "3e03acaff0248b07102a31e82e1c09e6635b4821895f7999ab636d7ad133a250",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-11",
    "question": "What is the useMemo hook used for in React?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "hooks",
      "memoization"
    ],
    "example": "const memoizedValue = useMemo(() => computeValue(a, b), [a, b]);",
    "options": [
      "Option A: To fetch data asynchronously",
      "Option B: To manage form state",
      "Option C: To memoize expensive calculations",
      "Option D: To create side effects"
    ],
    "answer": "Option C: To memoize expensive calculations",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "e7bdfde0ee6940d41b36938857f7218fabca763b6f52aca41b527d5d6babe688",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-12",
    "question": "How does React handle synthetic events?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "events",
      "synthetic-events"
    ],
    "example": "onClick={(e) => console.log(e)}",
    "options": [
      "Option A: By calling native DOM events directly",
      "Option B: Using a cross-browser wrapper around the native events",
      "Option C: By ignoring all event handling",
      "Option D: By delegating events to global handlers"
    ],
    "answer": "Option B: Using a cross-browser wrapper around the native events",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "dc9418c6eb3b65abdd70efb070d725988d856c8d0694d9d4fc053af78a327d58",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-13",
    "question": "What is the correct way to update state based on the previous state in React?",
    "difficulty": "medium",
    "topic": "react",
    "tags": [
      "state",
      "hooks"
    ],
    "example": "setCount((prevCount) => prevCount + 1);",
    "options": [
      "Option A: Directly mutating the state object",
      "Option B: Using a callback function in setState",
      "Option C: By reassigning the state variable",
      "Option D: Using the initial state directly"
    ],
    "answer": "Option B: Using a callback function in setState",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "8732535a53a2c9099c0967ef19a4cbc749fd8c1212f5bde277cb9eb8c35b80ac",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-14",
    "question": "Which lifecycle method is unsafe to use in React 18+?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "lifecycle",
      "component"
    ],
    "example": "componentWillMount() { ... }",
    "options": [
      "Option A: componentDidMount",
      "Option B: componentWillMount",
      "Option C: render",
      "Option D: shouldComponentUpdate"
    ],
    "answer": "Option B: componentWillMount",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "8715f89e42b2e1f6e0d85f575089ae951eaa8723004099543e2f87f21c90c49f",
    "savedAt": "2025-05-25T17:03:10.589Z"
  },
  {
    "id": "react-15",
    "question": "How do you handle errors in React components?",
    "difficulty": "hard",
    "topic": "react",
    "tags": [
      "error-boundary",
      "error-handling"
    ],
    "example": "class ErrorBoundary extends React.Component { ... }",
    "options": [
      "Option A: Using try-catch blocks in render",
      "Option B: By defining an ErrorBoundary component",
      "Option C: Using the onError hook",
      "Option D: By throwing errors in useEffect"
    ],
    "answer": "Option B: By defining an ErrorBoundary component",
    "timestamp": "2025-05-25T17:03:10.587Z",
    "hash": "e4638c25e2fbea90aa5cc75f6139da13b059284363f620c81638c8b109ffca77",
    "savedAt": "2025-05-25T17:03:10.589Z"
  }
]