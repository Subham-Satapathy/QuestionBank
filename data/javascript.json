[
  {
    "id": "1",
    "question": "What is the correct way to declare a variable in JavaScript that cannot be reassigned?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "general"
    ],
    "example": "const x = 10;",
    "options": [
      "Option A: var x = 10;",
      "Option B: let x = 10;",
      "Option C: const x = 10;",
      "Option D: x = 10;"
    ],
    "answer": "Option C: const x = 10;",
    "timestamp": "2025-05-25T16:03:41.958Z",
    "hash": "179f4208f3bddfef7a26dd828fd8a6da5aba039381340438a31920b56546e477",
    "savedAt": "2025-05-25T16:03:41.961Z"
  },
  {
    "id": "2",
    "question": "Which method is used to add an element to the end of an array in JavaScript?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "general"
    ],
    "example": "arr.push(5);",
    "options": [
      "Option A: arr.pop()",
      "Option B: arr.shift()",
      "Option C: arr.push()",
      "Option D: arr.unshift()"
    ],
    "answer": "Option C: arr.push()",
    "timestamp": "2025-05-25T16:03:41.959Z",
    "hash": "49b2455f692ba310a0a426cd39b65852653b71b8a1b7a22f5f1ab29066bb9597",
    "savedAt": "2025-05-25T16:03:41.961Z"
  },
  {
    "id": "4",
    "question": "Which of the following is NOT a JavaScript framework?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "general"
    ],
    "example": "React, Angular, Vue, Django",
    "options": [
      "Option A: React",
      "Option B: Angular",
      "Option C: Vue",
      "Option D: Django"
    ],
    "answer": "Option D: Django",
    "timestamp": "2025-05-25T16:03:41.959Z",
    "hash": "79b5c43d8b05e783164f09ef594d998767c4ed2b08159050f0286864a82e0d4b",
    "savedAt": "2025-05-25T16:03:41.961Z"
  },
  {
    "id": "js_medium_1",
    "question": "What is the most efficient way to remove duplicates from an array in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrays",
      "es6"
    ],
    "example": "const arr = [1, 2, 2, 3, 4, 4, 5];",
    "options": [
      "Option A: Use a for loop and indexOf to filter duplicates",
      "Option B: Use the Set object combined with the spread operator",
      "Option C: Use the filter method with a callback checking index",
      "Option D: Use the reduce method to accumulate unique values"
    ],
    "answer": "Option B: Use the Set object combined with the spread operator",
    "timestamp": "2025-05-25T16:04:34.963Z",
    "hash": "f1ee8e9e695ef205176ef0a9448223b35cdd31ffc0d0a8ae8ee579891232a463",
    "savedAt": "2025-05-25T16:04:34.965Z"
  },
  {
    "id": "js_medium_2",
    "question": "How can you check if an object is an array in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrays",
      "objects"
    ],
    "example": "const arr = [1, 2, 3];",
    "options": [
      "Option A: Use typeof arr",
      "Option B: Use arr instanceof Array",
      "Option C: Use Array.isArray(arr)",
      "Option D: Use arr.constructor === Array"
    ],
    "answer": "Option C: Use Array.isArray(arr)",
    "timestamp": "2025-05-25T16:04:34.963Z",
    "hash": "aedfb3ecae0549010b86b1e7bfe0604977965c4852f0837257a2d42d393f7d18",
    "savedAt": "2025-05-25T16:04:34.965Z"
  },
  {
    "id": "js_medium_3",
    "question": "What is the output of the following code: console.log(1 + '2' + '2' - '1');",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "type-coercion",
      "operators"
    ],
    "example": "console.log(1 + '2' + '2' - '1');",
    "options": [
      "Option A: 1221",
      "Option B: 121",
      "Option C: 113",
      "Option D: NaN"
    ],
    "answer": "Option B: 121",
    "timestamp": "2025-05-25T16:04:34.963Z",
    "hash": "7b973b0e815ddbdb479aceac5b37d44079ca263a27e89f8e5c312684474fd943",
    "savedAt": "2025-05-25T16:04:34.965Z"
  },
  {
    "id": "js_medium_5",
    "question": "What is the correct way to handle asynchronous operations in modern JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "async",
      "promises"
    ],
    "example": "async function fetchData() { ... }",
    "options": [
      "Option A: Use callbacks exclusively",
      "Option B: Use Promises with .then() and .catch()",
      "Option C: Use async/await syntax",
      "Option D: Use setTimeout"
    ],
    "answer": "Option C: Use async/await syntax",
    "timestamp": "2025-05-25T16:04:34.963Z",
    "hash": "93488070332b9be76cafca6e462f452149a1b5618285fb9a43ac4578a3d83509",
    "savedAt": "2025-05-25T16:04:34.965Z"
  },
  {
    "id": "js_hard_1",
    "question": "How would you implement a debounce function in JavaScript that ensures a function is not called more than once within a specified delay, while also ensuring the function is invoked with the latest arguments when the delay expires?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "closures",
      "async"
    ],
    "example": "function debounce(func, delay) { /* implementation */ }",
    "options": [
      "Option A: Use setTimeout and clearTimeout inside a closure, storing the timeout ID and latest arguments.",
      "Option B: Use setInterval to repeatedly check if the delay has passed before invoking the function.",
      "Option C: Use a Promise to delay the function execution and resolve with the latest arguments.",
      "Option D: Use a loop to continuously call the function until the delay is met."
    ],
    "answer": "Option A: Use setTimeout and clearTimeout inside a closure, storing the timeout ID and latest arguments.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "f77c06d81b4561211f27c69797310433ff1418e8fda79329c484157495ac87a5",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_2",
    "question": "What is the most efficient way to deep clone an object in JavaScript, including nested objects and handling circular references?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "objects",
      "recursion"
    ],
    "example": "const cloned = deepClone(obj);",
    "options": [
      "Option A: Use JSON.parse(JSON.stringify(obj)) and handle errors for circular references.",
      "Option B: Use a recursive function with a WeakMap to track and handle circular references.",
      "Option C: Iterate over the object properties and assign them to a new object recursively.",
      "Option D: Use the structuredClone API introduced in modern JavaScript."
    ],
    "answer": "Option B: Use a recursive function with a WeakMap to track and handle circular references.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "9e32b9e39d03432a8056daaa854e8a045b1aa519a3ba1557bc8843f7c4aba706",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_3",
    "question": "How would you implement a function to flatten a deeply nested array (e.g., [1, [2, [3, [4]]]]) into a flat array (e.g., [1, 2, 3, 4]) without using built-in methods like Array.prototype.flat()?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "arrays",
      "recursion"
    ],
    "example": "function flatten(arr) { /* implementation */ }",
    "options": [
      "Option A: Use a loop to iterate and recursively flatten nested arrays.",
      "Option B: Convert the array to a string, remove brackets, and split back into an array.",
      "Option C: Use reduce with recursion to concatenate nested arrays.",
      "Option D: Use a stack to iteratively flatten the array."
    ],
    "answer": "Option C: Use reduce with recursion to concatenate nested arrays.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "14f6dc138958e924e982cb5a21a6a12b90998e1313d593c74331cd6e595839d5",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_4",
    "question": "How would you implement a memoization function in JavaScript to cache the results of expensive function calls, including handling variable arguments?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "closures",
      "memoization"
    ],
    "example": "function memoize(func) { /* implementation */ }",
    "options": [
      "Option A: Use a cache object with JSON.stringify(args) as the key to store results.",
      "Option B: Use a WeakMap to store results and handle object arguments.",
      "Option C: Use a Map with a custom hashing function for the arguments.",
      "Option D: Use a global variable to store results and check against arguments."
    ],
    "answer": "Option A: Use a cache object with JSON.stringify(args) as the key to store results.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "31ebe40012a1f964da53e36d1dd2c79779fd4cb9a484854dc157f2721f89a18b",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_5",
    "question": "What is the most efficient way to find the first non-repeating character in a large string (e.g., 'javascript') without using excessive memory?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "strings",
      "algorithms"
    ],
    "example": "function firstNonRepeatingChar(str) { /* implementation */ }",
    "options": [
      "Option A: Use nested loops to check each character against all others.",
      "Option B: Use a hash map to count occurrences and then iterate the string to find the first count of 1.",
      "Option C: Sort the string first and then check adjacent characters.",
      "Option D: Use a Set to track duplicates and iterate once."
    ],
    "answer": "Option B: Use a hash map to count occurrences and then iterate the string to find the first count of 1.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "0cb81603a0f9af14317e14bf1876856550d7895e92bd759c749832b393e14a68",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_6",
    "question": "How would you implement a function to determine if two objects are deep equal (i.e., all properties and nested properties are equal)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "objects",
      "recursion"
    ],
    "example": "function deepEqual(a, b) { /* implementation */ }",
    "options": [
      "Option A: Use JSON.stringify to compare the objects as strings.",
      "Option B: Recursively compare each property, handling primitive values, objects, and arrays.",
      "Option C: Use Object.keys to compare lengths and property names, then values.",
      "Option D: Use a library like Lodash's isEqual function."
    ],
    "answer": "Option B: Recursively compare each property, handling primitive values, objects, and arrays.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "abe8530c7d045cc41ca9e3ed18ea11ff43f92a0420c33beec7378159b3856cda",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_7",
    "question": "How would you implement a function to lazily evaluate an array of functions, executing them only when their result is needed (e.g., for a lazy evaluation pipeline)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "functions",
      "lazy-evaluation"
    ],
    "example": "function lazyEvaluate(fns) { /* implementation */ }",
    "options": [
      "Option A: Use a generator function to yield results one at a time.",
      "Option B: Use Promise.all to execute all functions asynchronously.",
      "Option C: Use a closure to store the functions and execute them on demand.",
      "Option D: Use a proxy to intercept property accesses and execute functions."
    ],
    "answer": "Option A: Use a generator function to yield results one at a time.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "229fd7bdc264b1066a0f03c53a4bae1effdd4a9c8f8a1bb53e781c547e0644bf",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_8",
    "question": "How would you implement a function to throttle another function such that it is called at most once every N milliseconds, even if invoked more frequently?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "closures",
      "async"
    ],
    "example": "function throttle(func, limit) { /* implementation */ }",
    "options": [
      "Option A: Use setTimeout and a flag to track if the function can be called again.",
      "Option B: Use a Date comparison to check the time since the last call.",
      "Option C: Use a queue to store invocations and process them at the throttle rate.",
      "Option D: Use a debounce function with a leading edge."
    ],
    "answer": "Option A: Use setTimeout and a flag to track if the function can be called again.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "f4b195f19695f33cde3dbd0b26ffcbbe7b5bd778f812d49dcec8808623b6e0b1",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_9",
    "question": "How would you implement a function to chunk an array into smaller arrays of a specified size without modifying the original array?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "arrays",
      "iteration"
    ],
    "example": "function chunk(arr, size) { /* implementation */ }",
    "options": [
      "Option A: Use a loop and slice to create chunks of the specified size.",
      "Option B: Use recursion to split the array into smaller parts.",
      "Option C: Use reduce to accumulate chunks of the specified size.",
      "Option D: Use splice to remove elements into new arrays."
    ],
    "answer": "Option A: Use a loop and slice to create chunks of the specified size.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "ccf7f81a67c8226751f8089964caa142325d0639310d5dc3358bac495096118e",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_10",
    "question": "How would you implement a function to detect a cycle in a linked list (in JavaScript) and return the node where the cycle begins?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "algorithms",
      "linked-list"
    ],
    "example": "function detectCycle(head) { /* implementation */ }",
    "options": [
      "Option A: Use a Set to store visited nodes and check for duplicates.",
      "Option B: Use the Floyd's Tortoise and Hare algorithm (two pointers).",
      "Option C: Use recursion to traverse and track visited nodes.",
      "Option D: Use a Map to store node references and their positions."
    ],
    "answer": "Option B: Use the Floyd's Tortoise and Hare algorithm (two pointers).",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "d790ca1a9be801e71941a2db6dd4e0e44fedfd73313c36eaef1d69c3a67c4706",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_11",
    "question": "How would you implement a function to calculate the Fibonacci sequence up to N terms using memoization to optimize performance?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "recursion",
      "memoization"
    ],
    "example": "function fibonacci(n, memo = {}) { /* implementation */ }",
    "options": [
      "Option A: Use recursion without memoization and return the nth term.",
      "Option B: Use a loop to iteratively calculate the sequence.",
      "Option C: Use recursion with a memo object to store computed results.",
      "Option D: Use a generator function to yield terms one by one."
    ],
    "answer": "Option C: Use recursion with a memo object to store computed results.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "edf3cf248ef371af362719221a95136121f77722305c36432b6f137b32c54c8b",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_12",
    "question": "How would you implement a function to find all permutations of a string, including handling duplicate characters?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "recursion",
      "permutations"
    ],
    "example": "function permutations(str) { /* implementation */ }",
    "options": [
      "Option A: Use nested loops to generate all possible combinations.",
      "Option B: Use recursion to swap characters and backtrack.",
      "Option C: Use a Set to store unique permutations and filter duplicates.",
      "Option D: Use a heap's algorithm for generating permutations."
    ],
    "answer": "Option D: Use a heap's algorithm for generating permutations.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "fc233e97ff0f0b2c4ebeed367cc33dfa14681f82e8813cf8ffa0ed979b2f4b04",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_13",
    "question": "How would you implement a function to reverse a singly linked list in place (without using extra space for another data structure)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "linked-list",
      "pointers"
    ],
    "example": "function reverseList(head) { /* implementation */ }",
    "options": [
      "Option A: Use a stack to reverse the order of nodes.",
      "Option B: Use recursion to reverse the list from the end.",
      "Option C: Use iterative pointer manipulation to reverse the list.",
      "Option D: Use a queue to reorder the nodes."
    ],
    "answer": "Option C: Use iterative pointer manipulation to reverse the list.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "d41b239c036e03c2903f805db08117d0da9e01c1500f90ed3fbd256fb1d52ff6",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_14",
    "question": "How would you implement a function to merge two sorted arrays into one sorted array without using extra space (i.e., in-place merge)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "arrays",
      "sorting"
    ],
    "example": "function mergeSortedArrays(arr1, arr2) { /* implementation */ }",
    "options": [
      "Option A: Use the spread operator and sort the resulting array.",
      "Option B: Use a two-pointer technique to merge the arrays in place.",
      "Option C: Use concat and then apply a sorting algorithm.",
      "Option D: Use a Set to merge and sort the arrays."
    ],
    "answer": "Option B: Use a two-pointer technique to merge the arrays in place.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "dc58baad6bea34dad40cf9ce3e6c6cf7cd7019f1ca2250b9c700f4924a847ca2",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "js_hard_15",
    "question": "How would you implement a function to emulate the behavior of new in JavaScript (i.e., create an instance of a constructor function with the prototype chain properly set up)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "prototypes",
      "constructors"
    ],
    "example": "function myNew(constructor, ...args) { /* implementation */ }",
    "options": [
      "Option A: Create an object with Object.create(constructor.prototype) and apply the constructor.",
      "Option B: Use the constructor directly and bind this to the new object.",
      "Option C: Use Object.assign to copy properties from the constructor.",
      "Option D: Use Reflect.construct to create the instance."
    ],
    "answer": "Option A: Create an object with Object.create(constructor.prototype) and apply the constructor.",
    "timestamp": "2025-05-25T16:05:49.849Z",
    "hash": "82bb10e01bcd6ae0e6e567eaf4764480a22caa6be2b6535a16a1864239b3255e",
    "savedAt": "2025-05-25T16:05:49.851Z"
  },
  {
    "id": "1",
    "question": "How do you check if a variable is an array in JavaScript?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "arrays",
      "type-checking"
    ],
    "example": "const arr = [1, 2, 3];",
    "options": [
      "Option A: Use typeof operator",
      "Option B: Use Array.isArray() method",
      "Option C: Use instanceof Array",
      "Option D: Use arr.length property"
    ],
    "answer": "Option B: Use Array.isArray() method",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "5eb3e9c2225abb1f20c450b05ce217fa35332e32fce943d1474b9a08de58a94c",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "3",
    "question": "Which method is used to remove the last element from an array and return it?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "arrays"
    ],
    "example": "const arr = [1, 2, 3];",
    "options": [
      "Option A: arr.shift()",
      "Option B: arr.splice()",
      "Option C: arr.pop()",
      "Option D: arr.slice()"
    ],
    "answer": "Option C: arr.pop()",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "1d9f5430555b6682dad764fd11901e9db9e3ac8b1a881cf9b90014e0f6f92ed4",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "4",
    "question": "What is the correct way to create a new object in JavaScript?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "objects"
    ],
    "example": "",
    "options": [
      "Option A: const obj = new Object();",
      "Option B: const obj = {};",
      "Option C: const obj = Object.create();",
      "Option D: All of the above"
    ],
    "answer": "Option D: All of the above",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "9f5d425d045f7109359a60d309091993be207cf2ea18b3fc028f725c1f61f328",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "5",
    "question": "What will be the value of 'x' after this code executes? let x = 5; x = x++;",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "operators"
    ],
    "example": "let x = 5; x = x++;",
    "options": [
      "Option A: 5",
      "Option B: 6",
      "Option C: undefined",
      "Option D: NaN"
    ],
    "answer": "Option A: 5",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "6175c4999dbc2c1bda4f78f09efe55397a2090a62e106fe717c881bdb72a1e7f",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "7",
    "question": "What is the output of the following code? console.log([] == ![]);",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "type-coercion"
    ],
    "example": "console.log([] == ![]);",
    "options": [
      "Option A: true",
      "Option B: false",
      "Option C: undefined",
      "Option D: TypeError"
    ],
    "answer": "Option A: true",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "be351810c2c9639bb1861273a3d8309cfc5b754765e9798abe9bc9fba9197e71",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "8",
    "question": "Which of the following is NOT a way to handle asynchronous code in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "asynchronous"
    ],
    "example": "",
    "options": [
      "Option A: Callbacks",
      "Option B: Promises",
      "Option C: Async/Await",
      "Option D: Loops"
    ],
    "answer": "Option D: Loops",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "571265e5e8bbdf141ff2689c38531bd7786f831a304b02ab68b571166e09fdd4",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "10",
    "question": "What is the purpose of the 'use strict' directive in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "strict-mode"
    ],
    "example": "'use strict';",
    "options": [
      "Option A: Enforces stricter type checking",
      "Option B: Prevents the use of undeclared variables",
      "Option C: Optimizes code performance",
      "Option D: Enables ES6 features"
    ],
    "answer": "Option B: Prevents the use of undeclared variables",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "31f9babcc4d9f08d9fa3c0564d5279af741f3d17d1cb068d7263ad061884a038",
    "savedAt": "2025-05-25T16:07:05.328Z"
  },
  {
    "id": "11",
    "question": "How can you implement memoization in JavaScript?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "memoization",
      "performance"
    ],
    "example": "function expensiveFunction(n) { return n * 2; }",
    "options": [
      "Option A: Use a global variable to cache results",
      "Option B: Use a closure with a cache object",
      "Option C: Use setTimeout to delay execution",
      "Option D: Use a try-catch block"
    ],
    "answer": "Option B: Use a closure with a cache object",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "289e0d3b1047fe6a30c1a34d75fbe7885da7553eecde179fc4a3470d2ff4deef",
    "savedAt": "2025-05-25T16:07:05.329Z"
  },
  {
    "id": "12",
    "question": "What is the output of the following code? console.log(new Boolean(false) === false);",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "objects",
      "type-coercion"
    ],
    "example": "console.log(new Boolean(false) === false);",
    "options": [
      "Option A: true",
      "Option B: false",
      "Option C: undefined",
      "Option D: TypeError"
    ],
    "answer": "Option B: false",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "5d388c44b39566e706b16c37d047ad071f9e4b9fd2217484e22d012c9e05858b",
    "savedAt": "2025-05-25T16:07:05.329Z"
  },
  {
    "id": "13",
    "question": "Which of the following is a valid way to implement inheritance in JavaScript?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "inheritance"
    ],
    "example": "",
    "options": [
      "Option A: Using class and extends keywords",
      "Option B: Using prototype chaining",
      "Option C: Using Object.create()",
      "Option D: All of the above"
    ],
    "answer": "Option D: All of the above",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "78b9419757681884db0c69a7aa155e1571932d726683d89c7f8dbfa9a2de34b2",
    "savedAt": "2025-05-25T16:07:05.329Z"
  },
  {
    "id": "15",
    "question": "How do you prevent a function from being called more than once within a certain time period?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "debouncing",
      "performance"
    ],
    "example": "function handleResize() { console.log('Resized'); }",
    "options": [
      "Option A: Use setInterval",
      "Option B: Use requestAnimationFrame",
      "Option C: Use debouncing",
      "Option D: Use a while loop"
    ],
    "answer": "Option C: Use debouncing",
    "timestamp": "2025-05-25T16:07:05.327Z",
    "hash": "dc585ebde3f93b486a1208501624598a779f6a7626b664fcbe026ee35fc9ec73",
    "savedAt": "2025-05-25T16:07:05.329Z"
  },
  {
    "id": "2",
    "question": "Which method is used to add an element to the end of an array?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "general"
    ],
    "example": "let arr = [1, 2, 3];",
    "options": [
      "Option A: arr.push()",
      "Option B: arr.pop()",
      "Option C: arr.shift()",
      "Option D: arr.unshift()"
    ],
    "answer": "Option A: arr.push()",
    "timestamp": "2025-05-25T16:09:20.599Z",
    "hash": "2b59c5069bb0550e66640062fe6f0f6c114c0567e56e8cb81c3f329ddd1325fa",
    "savedAt": "2025-05-25T16:09:20.602Z"
  },
  {
    "id": "q2",
    "question": "Which method is used to merge two or more arrays in JavaScript without mutating the original arrays?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "arrays"
    ],
    "example": "",
    "options": [
      "Option A: arr1.push(arr2)",
      "Option B: arr1.concat(arr2)",
      "Option C: arr1.merge(arr2)",
      "Option D: arr1.add(arr2)"
    ],
    "answer": "Option B: arr1.concat(arr2)",
    "timestamp": "2025-05-25T16:10:26.305Z",
    "hash": "10b499e2e8450db12109cb459c27d15c3f9ba1ed8cd05804d2c2a4f511915fb8",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q4",
    "question": "What is the correct way to check if a variable `x` is an array in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrays",
      "type-checking"
    ],
    "example": "",
    "options": [
      "Option A: typeof x === 'array'",
      "Option B: x.isArray()",
      "Option C: Array.isArray(x)",
      "Option D: x.typeOf('array')"
    ],
    "answer": "Option C: Array.isArray(x)",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "bd0791efd3b8f8bd99712bdb7829a5a106531d8ac1eb6fb74d8addaf853fa8a3",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q5",
    "question": "What will be logged when the following code runs? \nlet a = 5;\nsetTimeout(() => { console.log(a); }, 0);\na = 10;",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "async",
      "event-loop"
    ],
    "example": "let a = 5;\nsetTimeout(() => { console.log(a); }, 0);\na = 10;",
    "options": [
      "Option A: 5",
      "Option B: 10",
      "Option C: undefined",
      "Option D: Nothing is logged"
    ],
    "answer": "Option B: 10",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "05048f90c056210328ced3beba1080bd715b86fa36bb683b24d95917d2c8ff00",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q6",
    "question": "Which of the following will correctly deep clone an object in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "objects",
      "cloning"
    ],
    "example": "",
    "options": [
      "Option A: JSON.parse(JSON.stringify(obj))",
      "Option B: Object.assign({}, obj)",
      "Option C: {...obj}",
      "Option D: obj.clone()"
    ],
    "answer": "Option A: JSON.parse(JSON.stringify(obj))",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "a067896e62768dce85fe1d6858703f503300d39bc5dd19eda4ebb356a7191bf1",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q7",
    "question": "What is the output of `console.log(0.1 + 0.2 === 0.3);` in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "floating-point"
    ],
    "example": "console.log(0.1 + 0.2 === 0.3);",
    "options": [
      "Option A: true",
      "Option B: false",
      "Option C: TypeError",
      "Option D: undefined"
    ],
    "answer": "Option B: false",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "39e8fea4bc356ae2149e964f326c82e332990340705ce37e728c8da0e5db1b57",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q8",
    "question": "How can you prevent a function from being called more than once every 500 milliseconds (debouncing)?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "debouncing",
      "performance"
    ],
    "example": "",
    "options": [
      "Option A: Using setTimeout and clearTimeout",
      "Option B: Using setInterval",
      "Option C: Using Promise.all",
      "Option D: Using a while loop"
    ],
    "answer": "Option A: Using setTimeout and clearTimeout",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "1307aa0e0784a8e0632094468fd7825085b2287e1010924989a4f74792b3a6f0",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q9",
    "question": "What is the output of the following code?\nfunction foo() {\n console.log(a);\n var a = 1;\n}\nfoo();",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "hoisting"
    ],
    "example": "function foo() {\n console.log(a);\n var a = 1;\n}\nfoo();",
    "options": [
      "Option A: 1",
      "Option B: undefined",
      "Option C: ReferenceError",
      "Option D: null"
    ],
    "answer": "Option B: undefined",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "f462a0dccff55b0a0262488c01c9759ac989aedfe520d47eec0220e82f7f0ea2",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q10",
    "question": "Which method is used to schedule a function to be executed after a specified delay in milliseconds?",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "timers"
    ],
    "example": "",
    "options": [
      "Option A: setImmediate()",
      "Option B: setTimeout()",
      "Option C: setInterval()",
      "Option D: queueMicrotask()"
    ],
    "answer": "Option B: setTimeout()",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "95c0fd0224cc3b06c5a59f12c55d3d1c50eeea04cd0144e018684bf8998b5e05",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q12",
    "question": "Which of the following is NOT a valid way to create an object in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "objects"
    ],
    "example": "",
    "options": [
      "Option A: let obj = new Object();",
      "Option B: let obj = {};",
      "Option C: let obj = Object.create(null);",
      "Option D: let obj = new Object(null);"
    ],
    "answer": "Option D: let obj = new Object(null);",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "69905afc28f2bf1df51096777cf12ac5761fe4e5a9c7ab255f2e86302cf46f8c",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q13",
    "question": "How would you implement memoization in a recursive Fibonacci function?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "memoization",
      "recursion"
    ],
    "example": "",
    "options": [
      "Option A: Using a global counter variable",
      "Option B: Using a cache object to store computed results",
      "Option C: Using a while loop instead of recursion",
      "Option D: Using a try-catch block"
    ],
    "answer": "Option B: Using a cache object to store computed results",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "14f78800459262b5be65d7dcb085fa9bbe74e95e9c176584f4e97d64e4b0b467",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q14",
    "question": "What does the `this` keyword refer to in an arrow function?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrow-functions",
      "this"
    ],
    "example": "",
    "options": [
      "Option A: The global object",
      "Option B: The object that owns the arrow function",
      "Option C: The lexical context where it was defined",
      "Option D: The first argument passed to the function"
    ],
    "answer": "Option C: The lexical context where it was defined",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "87297affc5fa202af92e2feec7b8cb66089518b67dce4de66f5c87583577ac73",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "q15",
    "question": "What is the output of the following code?\nconst arr = [1, 2, 3];\narr.length = 0;\nconsole.log(arr);",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrays"
    ],
    "example": "const arr = [1, 2, 3];\narr.length = 0;\nconsole.log(arr);",
    "options": [
      "Option A: [1, 2, 3]",
      "Option B: []",
      "Option C: [undefined, undefined, undefined]",
      "Option D: [0, 0, 0]"
    ],
    "answer": "Option B: []",
    "timestamp": "2025-05-25T16:10:26.307Z",
    "hash": "1b6fcba06eb1d1bf8a8a9ec0ebdff0bd30d0611fcfed16f61bef3e4ab9a23a31",
    "savedAt": "2025-05-25T16:10:26.310Z"
  },
  {
    "id": "js3",
    "question": "How would you implement a function to flatten a nested array in JavaScript?",
    "difficulty": "medium",
    "topic": "javascript",
    "tags": [
      "arrays",
      "recursion"
    ],
    "example": "flatten([1, [2, [3, 4], 5]]); // returns [1, 2, 3, 4, 5]",
    "options": [
      "Option A: Use Array.prototype.flat(Infinity)",
      "Option B: Use a while loop and Array.prototype.concat",
      "Option C: Use a recursive function with Array.prototype.reduce",
      "Option D: All of the above"
    ],
    "answer": "Option D: All of the above",
    "timestamp": "2025-05-25T16:15:58.014Z",
    "hash": "292eede30e71fe1c9dfacd3ef53b9a2196114d1acc897550bb44c3ff889be658",
    "savedAt": "2025-05-25T16:15:58.018Z"
  },
  {
    "id": "js4",
    "question": "What is the output of the following code?\nlet a = {};\nlet b = {};\nconsole.log(a == b, a === b);",
    "difficulty": "easy",
    "topic": "javascript",
    "tags": [
      "objects",
      "equality"
    ],
    "example": "let a = {};\nlet b = {};\nconsole.log(a == b, a === b);",
    "options": [
      "Option A: true, true",
      "Option B: false, false",
      "Option C: true, false",
      "Option D: false, true"
    ],
    "answer": "Option B: false, false",
    "timestamp": "2025-05-25T16:15:58.014Z",
    "hash": "20d4a55d38739b0743b6b7679fdde1dc0755d6c30cb62ff26dd6f75e224148b2",
    "savedAt": "2025-05-25T16:15:58.018Z"
  },
  {
    "id": "js5",
    "question": "How would you implement a memoization function for a recursive Fibonacci sequence generator in JavaScript?",
    "difficulty": "hard",
    "topic": "javascript",
    "tags": [
      "memoization",
      "recursion",
      "optimization"
    ],
    "example": "const fibonacci = memoizeFib((n) => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2));",
    "options": [
      "Option A: Use a global cache object to store computed results",
      "Option B: Use a closure with a cache object inside the memoization function",
      "Option C: Use a WeakMap to handle garbage collection automatically",
      "Option D: All of the above"
    ],
    "answer": "Option B: Use a closure with a cache object inside the memoization function",
    "timestamp": "2025-05-25T16:15:58.014Z",
    "hash": "f91f736c612f8ebdb31f1aea14fc8c395877d2b21c13b702476194edc8e5ea5e",
    "savedAt": "2025-05-25T16:15:58.018Z"
  },
  {
    "question": "Write a function that reverses a string without using built-in reverse methods.",
    "difficulty": "easy",
    "tags": [
      "strings",
      "algorithms"
    ],
    "example": "reverseString('hello') // returns 'olleh'",
    "options": [
      "Use a for loop to iterate backwards",
      "Use recursion to reverse the string",
      "Convert to array, reverse, then join",
      "Use two pointers approach"
    ],
    "answer": "Use a for loop to iterate backwards",
    "id": "javascript_mixed_mock_1748189758014_0",
    "topic": "javascript",
    "timestamp": "2025-05-25T16:15:58.014Z",
    "hash": "4dea96d14e04b6935c12fcdaa4b8daad001b91e124565f781921afeccf28f60c",
    "savedAt": "2025-05-25T16:15:58.018Z"
  }
]